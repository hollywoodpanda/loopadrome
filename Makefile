# List of source files, separated by spaces
SOURCES = $(shell find src -name '*.c')

# Output executable name
OBJ_NAME = loopadrome

# Output directory
OUTPUT = output

# Compiler and linker flags
CC = gcc
INCLUDE_PATHS = -I/usr/local/include
LIBRARY_PATHS = -L/usr/local/lib
COMPILER_FLAGS = -Wall -Wextra -g
#LINKER_FLAGS = -lglfw3 -framework OpenGL -framework cocoa -framework IOKit -framework CoreVideo
# Set OS-specific linker flags
ifeq ($(OS),Windows_NT)
    LINKER_FLAGS = -lglfw3 -lopengl32
else ifeq ($(shell uname -s),Darwin)
    LINKER_FLAGS = -lglfw3 -framework OpenGL -framework Cocoa -framework IOKit -framework CoreVideo
else
    LINKER_FLAGS = -lglfw -lGL -lX11 -lpthread -lXrandr -lXi
endif


# Define the object files and dependency output files
OBJECTS = $(SOURCES:.c=.o)
DEPS = $(SOURCES:.c=.d)

# Set OS-specific commands
ifeq ($(OS),Windows_NT)
    RM = del /q /f
    MD = mkdir
    EXE_EXT = .exe
else
    RM = rm -f
    MD = mkdir -p
    EXE_EXT =
endif

# Define the output executable path
OUTPUTMAIN = $(OUTPUT)/$(OBJ_NAME)$(EXE_EXT)

# Default target is to build the executable
all: $(OUTPUTMAIN)

# Rule to build the executable
$(OUTPUTMAIN): $(OBJECTS)
	$(MD) $(OUTPUT)
	$(CC) $(OBJECTS) $(INCLUDE_PATHS) $(LIBRARY_PATHS) $(COMPILER_FLAGS) $(LINKER_FLAGS) -o $@

# Rule to compile C source files
%.o: %.c
	$(CC) $(INCLUDE_PATHS) $(COMPILER_FLAGS) -MMD -c $< -o $@

# Include dependency files generated by the compiler
-include $(DEPS)

# Clean target removes object and dependency files and the executable
clean:
	$(RM) $(OBJECTS) $(DEPS) $(OUTPUTMAIN)
	@echo Cleanup complete!
